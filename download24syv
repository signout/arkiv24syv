#!/usr/local/bin/python3

# This line should be the only one you need to edit
downloaddir = '/Users/signout/Desktop/arkiv24syv/filer/'

# import some stuff we need
import sqlite3
import requests
import os
from urllib.parse import urlparse

# Various strings
version = '0.0.4'
debug = 1
headers = {'user-agent': 'test-app/' + version}
sql_get_a_file = """SELECT guid, contenturl, filesize, duration FROM items WHERE downloaded = '0' ORDER BY RANDOM() LIMIT 1"""
sql_set_downloaded = """UPDATE items SET downloaded = '1' where guid = ?"""
sql_set_downloaded_image = """UPDATE items SET imagedownloaded = '1' where guid = ?"""

# Make sure the download dir exists by creating it
os.makedirs(downloaddir, exist_ok=True) 




### Function for downloading the file
def download_file(url):
  if (debug):
    print("Starting download of " + url)

  local_filename = url.split('/')[-1]
  local_pathname = url.split('/')[3:8]
  if (debug):
    print(local_pathname)
  os.makedirs(downloaddir + local_pathname[0] + '/' + local_pathname[1] + '/' +  local_pathname[2] + '/' +  local_pathname[3], exist_ok=True)
  # NOTE the stream=True parameter below
  with requests.get(url, stream=True, headers=headers) as r:
      r.raise_for_status()
      with open(downloaddir + local_pathname[0] + '/' +  local_pathname[1] + '/' +  local_pathname[2] + '/' +  local_pathname[3] + '/' +  local_filename, 'wb') as f:
          for chunk in r.iter_content(chunk_size=262144):
              if chunk: # filter out keep-alive new chunks
                  f.write(chunk)
  return 1




db = sqlite3.connect('arkiv24syv.db')
cursor = db.cursor()
cursor.execute("SELECT guid, contenturl, filesize, duration, imagelink FROM items WHERE downloaded = '0' ORDER BY RANDOM() LIMIT 1")

exist = cursor.fetchone()
if exist:
  if (download_file(exist[1])):
    guid = exist[0]
    if (debug):
      print("Updating the downloaded flag for guid " + guid)
    cursor.execute(sql_set_downloaded, (guid,))

  if (download_file(exist[4])):
    guid = exist[0]
    if (debug):
      print("Updating the downloaded image flag for guid " + guid)
    cursor.execute(sql_set_downloaded_image, (guid,))

else:
  if (debug):
    print("Nothing to do")
  exit() # Nothing to do

db.commit()
db.close()

